name: Prepare release

inputs:
  git-author-name:
    default: "DataLad Bot"
  git-author-email:
    default: "bot@datalad.org"
  token:
    default: ${{ secrets.GITHUB_TOKEN }}
  pypi-token:
    default: ""
  pre-tag:
    default: ""
  config:
    default: ".datalad-release-action.yaml"

outputs:
  new-version:
    value: ${{ steps.new-version.outputs.new-version }}

runs:
  using: composite
  steps:
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '^3.7'

    - name: Install nox
      run: python -m pip install --upgrade nox
      shell: bash

    - name: Install build & twine
      if: inputs.pypi-token != ''
      run: python -m pip install build twine
      shell: bash

    - name: Calculate new version and comment on PRs & issues
      id: new-version
      run: |
        nox -f "$GITHUB_ACTION_PATH/../noxfile.py" -e run -- \
          -c "$config" ${{ github.repository }} release
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.token }}
        config: ${{ inputs.config }}

    - name: Create new CHANGELOG section
      run: |
        scriv collect --add --version ${{ steps.new-version.outputs.new-version }}
        git commit -m '[skip ci] Update CHANGELOG'
      shell: bash
      env:
        GIT_AUTHOR_NAME: ${{ inputs.git-author-name }}
        GIT_AUTHOR_EMAIL: ${{ inputs.git-author-email }}

    - name: Run custom pre-tag step
      if: inputs.pre-tag != ''
      run: ${{ inputs.pre-tag }}
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.token }}
        GIT_AUTHOR_NAME: ${{ inputs.git-author-name }}
        GIT_AUTHOR_EMAIL: ${{ inputs.git-author-email }}
        new_version: ${{ steps.new-version.outputs.new-version }}

    - name: Create tag and release
      run: |
        git tag -m "Update version to $new_version" "$new_version"
        git push --follow-tags
        scriv github-release
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.token }}
        GIT_AUTHOR_NAME: ${{ inputs.git-author-name }}
        GIT_AUTHOR_EMAIL: ${{ inputs.git-author-email }}
        new_version: ${{ steps.new-version.outputs.new-version }}

    - name: Build and upload to PyPI
      if: inputs.pypi-token != ''
      run: |
        python -m build
        twine upload dist/*
      shell: bash
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ inputs.pypi-token }}

# vim:set sts=2:
